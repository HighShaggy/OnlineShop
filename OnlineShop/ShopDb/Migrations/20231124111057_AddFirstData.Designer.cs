// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopDb;

namespace ShopDb.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231124111057_AddFirstData")]
    partial class AddFirstData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShopDb.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CartDb");
                });

            modelBuilder.Entity("ShopDb.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("ProductQuantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ShopDb.Models.Compare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CompareItems");
                });

            modelBuilder.Entity("ShopDb.Models.Favourit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavouritItems");
                });

            modelBuilder.Entity("ShopDb.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName");

                    b.Property<string>("OrderStatus");

                    b.Property<int?>("ProductCartId");

                    b.Property<string>("ShippingAddress");

                    b.Property<int>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductCartId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopDb.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<string>("Description");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductDb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 6999m,
                            Description = "Ультра-легкая конструкция Уникальный, праворукий дизайн Сенсор pixart 3389 Провод xtrfy ezcord",
                            ImagePath = "~/images/products/XtrfyRetro.webp",
                            Name = "Xtrfy Retro Edition"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 7999m,
                            Description = "В игровой мыши Logitech G403 HERO используется новейший датчик HERO 25K.Этот датчик обеспечивает отслеживание без задержек на скорости более 10 м/с (400 дюйм/с) при уровне чувствительности от 100 до 25 600 точек на дюйм.",
                            ImagePath = "~/images/products/logitechG403.webp",
                            Name = "Logitech G G403 Hero"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 8999m,
                            Description = "Мышь проводная Xtrfy M4 RGB Tokyo отличается от многих моделей облегченным перфорированным корпусом. Слегка изогнутый корпус удобно лежит в правой руке, снимая лишнее напряжение с запястья.",
                            ImagePath = "~/images/products/XtrfyTokyoEdition.webp",
                            Name = "Xtrfy Tokyo Edition"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 4090m,
                            Description = "Мышь проводная SteelSeries Rival 3 - оптимальный вариант для прохождения игр любой жанровой направленности.",
                            ImagePath = "~/images/products/SteelseriesRival3.webp",
                            Name = "Steelseries Rival 3"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 6060m,
                            Description = "Дизайн и габариты SteelSeries Sensei очень напоминают легендарную мышь SteelSeries Xai Laser, которая может похвастать отличной эргономикой. Корпус имеет симметричную форму, и поэтому манипулятор подходит как правшам, так и левшам.",
                            ImagePath = "~/images/products/SteelseriesSensei.webp",
                            Name = "Steelseries Sensei"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 12990m,
                            Description = "Игровая клавиатура SteelSeries Apex 5 Keyboard RU чёрная Корпус SteelSeries Apex 5 — это монолитная пластина, изготовленная из авиационного алюминия Series 5000, который отличается исключительной прочностью и надежностью. ",
                            ImagePath = "~/images/products/SteelseriesApex.webp",
                            Name = "Steelseries Apex"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 10999m,
                            Description = "Клавиатура Logitech G Pro представлена в строгом черном корпусе и обладает многочисленными функциями, которые делают ее идеальным инструментом для игр. Это механическая клавиатура с переключателями GX Blue.",
                            ImagePath = "~/images/products/LogitechGpro.webp",
                            Name = "Logitech G Pro"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 8990m,
                            Description = "Беспроводная клавиатура Logitech POP Keys. Круглые клавиши модели напоминают клавиши печатной машинки. Звук при печати довольно громкий и для срабатывания нужно сделать довольно сильное нажатие.",
                            ImagePath = "~/images/products/LogitechPopKeys.webp",
                            Name = "Logitech Pop keys"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 2990m,
                            Description = "Игровой коврик Steelseries QcK Edge M размерами 32х27 см отлично подходит для яростных виртуальных сражений. Стильный аксессуар легко сочетается с другими геймерскими комплектующими.",
                            ImagePath = "~/images/products/SteelseriesQck.webp",
                            Name = "Steelseries Qck edge"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 3990m,
                            Description = "Большой игровой коврик для мыши. Patrik \"F0REST\" Lindberg EDITION.",
                            ImagePath = "~/images/products/XtrfyForestEdition.webp",
                            Name = "Xtrfy Forest Edition"
                        });
                });

            modelBuilder.Entity("ShopDb.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("UserDb");
                });

            modelBuilder.Entity("ShopDb.Models.CartItem", b =>
                {
                    b.HasOne("ShopDb.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("ShopDb.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ShopDb.Models.Compare", b =>
                {
                    b.HasOne("ShopDb.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ShopDb.Models.Favourit", b =>
                {
                    b.HasOne("ShopDb.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ShopDb.Models.Order", b =>
                {
                    b.HasOne("ShopDb.Models.Cart", "ProductCart")
                        .WithMany()
                        .HasForeignKey("ProductCartId");
                });
#pragma warning restore 612, 618
        }
    }
}
